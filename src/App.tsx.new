import { useState, useEffect, createContext, useContext, ReactNode, FC } from 'react';
import { BrowserRouter, Routes, Route, Outlet, Navigate, useLocation } from 'react-router-dom';
import { GoogleOAuthProvider } from '@react-oauth/google';
import { CircularProgress } from '@mui/material';
import axios from 'axios';
import './index.css';

// Import pages
import UserProfilePage from './pages/UserProfilePage';

// Define types
interface User {
  _id: string;
  name: string;
  email: string;
  profileComplete?: boolean;
}

interface AppContextType {
  currentUser: User | null;
  isLoadingAuth: boolean;
  login: (user: User, token: string) => void;
  logout: () => void;
  openModal: (mode: 'login' | 'signup') => void;
}

// Create context
const AppContext = createContext<AppContextType | undefined>(undefined);

// API configuration
const API_URL = 'http://localhost:5001/api';

// Context hook
const useAppContext = () => {
  const context = useContext(AppContext);
  if (!context) {
    throw new Error('useAppContext must be used within an AppProvider');
  }
  return context;
};

// Navbar component
const Navbar: FC = () => (
  <nav className="bg-white shadow dark:bg-gray-800">
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div className="flex items-center justify-between h-16">
        <div className="flex items-center">
          <div className="text-xl font-bold text-gray-900 dark:text-white">Careerion</div>
        </div>
      </div>
    </div>
  </nav>
);

// Protected Route component
const ProtectedRoute: FC<{ element: ReactNode }> = ({ element }) => {
  const { currentUser, isLoadingAuth } = useAppContext();
  const navigate = useNavigate();
  const location = useLocation();
  const [isCheckingProfile, setIsCheckingProfile] = useState(true);
  const [profileComplete, setProfileComplete] = useState(false);

  // List of routes where profile completion is not required
  const publicRoutes = ['/profile'];
  const isPublicRoute = publicRoutes.includes(location.pathname);

  useEffect(() => {
    const checkProfile = async () => {
      if (!currentUser) {
        navigate('/');
        return;
      }

      // If it's a public route, we don't need to check profile status
      if (isPublicRoute) {
        setIsCheckingProfile(false);
        return;
      }

      try {
        const token = localStorage.getItem('token');
        const response = await axios.get(`${API_URL}/user/profile/status`, {
          headers: { Authorization: `Bearer ${token}` }
        });
        setProfileComplete(response.data.profileComplete);
      } catch (error) {
        console.error('Error checking profile status:', error);
        setProfileComplete(false);
      } finally {
        setIsCheckingProfile(false);
      }
    };

    if (currentUser) {
      checkProfile();
    }
  }, [currentUser, navigate, isPublicRoute]);

  if (isLoadingAuth || (currentUser && isCheckingProfile && !isPublicRoute)) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <CircularProgress />
      </div>
    );
  }

  if (!currentUser) {
    return <Navigate to="/" />;
  }

  // If profile is not complete and not on the profile page, redirect to profile
  if (!profileComplete && !isPublicRoute) {
    return <Navigate to="/profile" state={{ from: location }} replace />;
  }

  return <>{element}</>;
};

// App Layout component
const AppLayout: FC = () => {
  const location = useLocation();
  const isProfilePage = location.pathname === '/' || location.pathname === '/profile';
  
  return (
    <div className={`min-h-screen ${isProfilePage ? 'bg-gray-50 dark:bg-gray-900' : 'bg-white dark:bg-gray-900'}`}>
      {!isProfilePage && <Navbar />}
      <main className="container mx-auto px-4 py-8">
        <Outlet />
      </main>
    </div>
  );
};

// Home page component
const HomePage: FC = () => {
  const { login } = useAppContext();
  
  const handleGoogleSuccess = async (response: any) => {
    try {
      const res = await axios.post(`${API_URL}/auth/google`, {
        token: response.credential
      });
      
      const { user, token } = res.data;
      login(user, token);
    } catch (error) {
      console.error('Google login error:', error);
    }
  };

  return (
    <div className="flex flex-col items-center justify-center min-h-screen p-4">
      <div className="w-full max-w-md p-8 space-y-8 bg-white rounded-lg shadow-md dark:bg-gray-800">
        <div className="text-center">
          <h1 className="text-3xl font-bold text-gray-900 dark:text-white">Welcome to Careerion</h1>
          <p className="mt-2 text-gray-600 dark:text-gray-300">
            Sign in to get personalized career recommendations
          </p>
        </div>
        <div className="mt-8">
          <GoogleOAuthProvider clientId={process.env.REACT_APP_GOOGLE_CLIENT_ID || ''}>
            <button
              onClick={() => {
                // @ts-ignore
                window.google.accounts.id.initialize({
                  client_id: process.env.REACT_APP_GOOGLE_CLIENT_ID,
                  callback: handleGoogleSuccess
                });
                // @ts-ignore
                window.google.accounts.id.prompt();
              }}
              className="w-full flex items-center justify-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              <svg className="w-5 h-5 mr-2" viewBox="0 0 24 24" width="24" height="24">
                <g transform="matrix(1, 0, 0, 1, 27.009001, -39.238998)">
                  <path
                    fill="#4285F4"
                    d="M -3.264 51.509 C -3.264 50.719 -3.334 49.969 -3.454 49.239 L -14.754 49.239 L -14.754 53.749 L -8.28426 53.749 C -8.73374 55.863 -9.42441 57.751 -10.2852 59.439 L -10.2787 59.439 L -4.27675 64.187 L -3.78577 64.187 C -0.590851 61.173 1.33418e-15 55.869 1.33418e-15 51.509 C 1.33418e-15 50.868 -0.022 50.189 -0.066 49.509 L -3.264 49.509 L -3.264 51.509 Z"
                  />
                  <path
                    fill="#34A853"
                    d="M -14.754 63.239 C -9.443 63.239 -4.814 61.254 -1.77 57.813 L -6.717 53.749 C -8.107 55.159 -10.147 56.009 -14.754 56.009 C -19.02 56.009 -22.638 53.617 -24.106 49.739 L -24.106 49.739 L -28.185 49.739 L -28.185 54.449 C -26.095 58.439 -21.839 63.239 -14.754 63.239 Z"
                  />
                  <path
                    fill="#FBBC05"
                    d="M -24.106 49.739 C -24.706 48.159 -25.004 46.449 -25.004 44.689 C -25.004 42.929 -24.706 41.219 -24.106 39.639 L -24.106 34.929 L -28.185 34.929 C -30.015 38.439 -30.999 42.429 -30.999 44.689 C -30.999 46.949 -30.015 50.939 -28.185 54.449 L -24.106 49.739 Z"
                  />
                  <path
                    fill="#EA4335"
                    d="M -14.754 33.369 C -11.979 33.369 -9.344 34.269 -7.194 35.929 L -1.77 30.499 C -4.814 27.119 -9.443 25.139 -14.754 25.139 C -21.839 25.139 -26.095 29.939 -28.185 33.929 L -24.106 39.639 C -22.638 35.761 -19.02 33.369 -14.754 33.369 Z"
                  />
                </g>
              </svg>
              Sign in with Google
            </button>
          </GoogleOAuthProvider>
        </div>
      </div>
    </div>
  );
};

// App Provider component
const AppProvider: FC<{ children: ReactNode }> = ({ children }) => {
  const [currentUser, setCurrentUser] = useState<User | null>(null);
  const [isLoadingAuth, setIsLoadingAuth] = useState(true);

  // Check if user is already logged in
  useEffect(() => {
    const token = localStorage.getItem('token');
    if (token) {
      // Verify token and get user data
      const verifyToken = async () => {
        try {
          const response = await axios.get(`${API_URL}/auth/me`, {
            headers: { Authorization: `Bearer ${token}` }
          });
          setCurrentUser(response.data.user);
        } catch (error) {
          console.error('Token verification failed:', error);
          localStorage.removeItem('token');
        } finally {
          setIsLoadingAuth(false);
        }
      };
      
      verifyToken();
    } else {
      setIsLoadingAuth(false);
    }
  }, []);

  const login = (user: User, token: string) => {
    localStorage.setItem('token', token);
    setCurrentUser(user);
  };

  const logout = () => {
    localStorage.removeItem('token');
    setCurrentUser(null);
  };

  const openModal = (mode: 'login' | 'signup') => {
    // Implementation for opening auth modal if needed
    console.log(`Open ${mode} modal`);
  };

  return (
    <AppContext.Provider value={{ currentUser, isLoadingAuth, login, logout, openModal }}>
      {children}
    </AppContext.Provider>
  );
};

// Main App component
const App: FC = () => {
  return (
    <GoogleOAuthProvider clientId={process.env.REACT_APP_GOOGLE_CLIENT_ID || ''}>
      <AppProvider>
        <BrowserRouter>
          <Routes>
            <Route path="/" element={<AppLayout />}>
              <Route index element={<HomePage />} />
              <Route path="profile" element={
                <ProtectedRoute element={<UserProfilePage />} />
              } />
              <Route path="dashboard" element={
                <ProtectedRoute element={<div>Dashboard</div>} />
              } />
              <Route path="career-coach" element={
                <ProtectedRoute element={<div>Career Coach</div>} />
              } />
              <Route path="recommendations" element={
                <ProtectedRoute element={<div>Recommendations</div>} />
              } />
            </Route>
          </Routes>
        </BrowserRouter>
      </AppProvider>
    </GoogleOAuthProvider>
  );
};

export default App;
